apply plugin: 'java-library'
apply plugin: "jacoco"
apply from: "$rootDir/gradle/publications.gradle"


jar {
	manifest.attributes["Implementation-Title"] = project.name
	manifest.attributes["Implementation-Version"] = project.version
	manifest.attributes["Automatic-Module-Name"] = project.name.replace('-', '.')  // for Jigsaw
	manifest.attributes["Created-By"] =
			"${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
}

normalization {
	runtimeClasspath {
		ignore "META-INF/MANIFEST.MF"
	}
}

javadoc {
	description = "Generates project-level javadoc for use in -javadoc jar"

	options.encoding = "UTF-8"
	options.memberLevel = JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = project.name
	options.use = true
//	options.links(project.ext.javadocLinks)
	options.addStringOption("Xdoclint:none", "-quiet")

	// Suppress warnings due to cross-module @see and @link references.
	// Note that global 'api' task does display all warnings.
	logging.captureStandardError LogLevel.INFO
	logging.captureStandardOutput LogLevel.INFO  // suppress "## warnings" message
}

task sourcesJar(type: Jar, dependsOn: classes) {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
	// Don't include or exclude anything explicitly by default. See SPR-12085.
}

task javadocJar(type: Jar) {
	archiveClassifier.set("javadoc")
	from javadoc
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
	}
}

test {
	useJUnitPlatform()
	include(["**/*Tests.class", "**/*Test.class"])

	testLogging {
		events "failed"
		exceptionFormat "full"
	}

	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				"plus/hutool/media/document/convert/DocumentConvertUtils.class"
			])
		}))
	}
}

jacoco {
	toolVersion = "0.8.8"
}

// Disable publication of test fixture artifacts.
//components.java.withVariantsFromConfiguration(configurations.testFixturesApiElements) { skip() }
//components.java.withVariantsFromConfiguration(configurations.testFixturesRuntimeElements) { skip() }
